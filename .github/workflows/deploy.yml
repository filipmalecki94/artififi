name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# No need for registry variables since we build locally

jobs:
  # Job 1: Run tests first (reuse existing CI logic)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache vendor (Composer)
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      # Build only potrzebne serwisy (php + mysql)
      - name: Build Docker images
        run: |
          echo "🏗️ Building Docker images for testing..."
          docker compose -f docker-compose.yml build php mysql

      - name: Start containers
        run: |
          echo "🚀 Starting containers for testing..."
          docker compose -f docker-compose.yml up -d php mysql
          sleep 10

      # Setup environment and install dependencies
      - name: Setup environment
        run: |
          echo "⚙️ Setting up CI environment..."
          cat > .env.ci << EOF
          APP_ENV=test
          APP_SECRET=test-secret-key-for-ci-12345678901234567890
          DATABASE_URL=mysql://user:user@mysql:3306/sword_app
          MAILER_DSN=null://null
          MESSENGER_TRANSPORT_DSN=doctrine://default
          VAR_DUMPER_SERVER=127.0.0.1:9912
          WORDPRESS_SITE_URL=https://test.localhost
          WORDPRESS_DB_NAME=sword_app
          WORDPRESS_DB_USER=user
          WORDPRESS_DB_PASSWORD=user
          WORDPRESS_DB_HOST=mysql
          WORDPRESS_AUTH_KEY=test-auth-key-for-ci
          WORDPRESS_SECURE_AUTH_KEY=test-secure-auth-key-for-ci
          WORDPRESS_LOGGED_IN_KEY=test-logged-in-key-for-ci
          WORDPRESS_NONCE_KEY=test-nonce-key-for-ci
          WORDPRESS_AUTH_SALT=test-auth-salt-for-ci
          WORDPRESS_SECURE_AUTH_SALT=test-secure-auth-salt-for-ci
          WORDPRESS_LOGGED_IN_SALT=test-logged-in-salt-for-ci
          WORDPRESS_NONCE_SALT=test-nonce-salt-for-ci
          WORDPRESS_DEBUG=false
          WORDPRESS_DEBUG_DISPLAY=false
          EOF
          docker compose -f docker-compose.yml cp .env.ci php:/var/www/html/.env

      - name: Install dependencies
        run: |
          echo "📦 Installing PHP dependencies..."
          docker compose -f docker-compose.yml exec -T php composer install --no-interaction --prefer-dist --no-scripts

      - name: Run Composer scripts
        run: |
          echo "🔧 Running Composer post-install scripts..."
          docker compose -f docker-compose.yml exec -T php php bin/console cache:clear --env=test || true
          docker compose -f docker-compose.yml exec -T php php bin/console cache:warmup --env=test || true

      - name: Run PHPStan
        run: |
          echo "🔍 Running PHPStan static analysis..."
          docker compose -f docker-compose.yml exec -T php vendor/bin/phpstan analyse --memory-limit=512M

      - name: Run PHPUnit
        run: |
          echo "🧪 Running PHPUnit tests..."
          docker compose -f docker-compose.yml exec -T php vendor/bin/phpunit --testdox --verbose

      - name: Stop containers
        if: always()
        run: |
          docker compose -f docker-compose.yml down -v
          rm -f .env.ci
          docker system prune -f

  # Job 2: Deploy to production
  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "🚀 Preparing deployment to ${{ github.event.inputs.environment || 'production' }}..."
          echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV



      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          debug: true
          script_stop: true
          script: |
            echo "🔍 SSH connection test successful!"
            whoami
            pwd
            echo "Server: $(hostname)"
            echo "Date: $(date)"
            
            echo "🚀 Starting deployment on production server..."
            
            # Check if git is installed
            echo "🔧 Checking prerequisites..."
            if ! command -v git >/dev/null 2>&1; then
              echo "❌ Git is not installed!"
              exit 1
            fi
            echo "✅ Git version: $(git --version)"
            
            if ! command -v docker >/dev/null 2>&1; then
              echo "❌ Docker is not installed!"
              exit 1
            fi
            echo "✅ Docker found: $(which docker)"
            
            # Test Docker permissions
            echo "🔐 Testing Docker permissions..."
            if docker version >/dev/null 2>&1; then
              echo "✅ Docker is accessible"
              echo "📋 Docker version: $(docker --version)"
            else
              echo "❌ Docker permission denied. User may not be in docker group."
              echo "👤 Current user: $(whoami)"
              echo "👥 User groups: $(groups)"
              echo "🔧 Attempting to add user to docker group..."
              sudo usermod -aG docker $(whoami) || echo "❌ Failed to add user to docker group"
              echo "🔄 You may need to logout and login again, or restart the session"
              # Try with sudo as temporary fix
              if sudo docker version >/dev/null 2>&1; then
                echo "✅ Docker works with sudo"
                echo "⚠️  Using sudo for Docker commands"
                DOCKER_CMD="sudo docker"
                DOCKER_COMPOSE_CMD="sudo docker-compose"
              else
                echo "❌ Docker doesn't work even with sudo"
                exit 1
              fi
            fi
            
            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "❌ Docker Compose is not installed!"
              exit 1
            fi
            echo "✅ Docker Compose found: $(which docker-compose)"
            
            # Test Docker Compose permissions  
            echo "🔐 Testing Docker Compose permissions..."
            if ${DOCKER_COMPOSE_CMD:-docker-compose} version >/dev/null 2>&1; then
              echo "✅ Docker Compose is accessible"
              echo "📋 Docker Compose version: $(${DOCKER_COMPOSE_CMD:-docker-compose} --version)"
            else
              echo "❌ Docker Compose permission denied"
              exit 1
            fi
            
            # Create deployment directory and clone/update repository
            echo "📁 Managing repository..."
            echo "🔗 Repository URL: ${{ github.server_url }}/${{ github.repository }}.git"
            echo "🌿 Target branch: ${{ github.ref_name }}"
            echo "📂 Target directory: $HOME/artififi"
            
            # Test GitHub connectivity
            echo "🌐 Testing GitHub connectivity..."
            if ping -c 3 github.com >/dev/null 2>&1; then
              echo "✅ GitHub is reachable"
            else
              echo "❌ GitHub is not reachable"
              exit 1
            fi
            
            # Test if repository is accessible
            echo "🔐 Testing repository access..."
            if git ls-remote --heads ${{ github.server_url }}/${{ github.repository }}.git >/dev/null 2>&1; then
              echo "✅ Repository is accessible"
            else
              echo "❌ Repository is not accessible (may be private or authentication failed)"
              echo "🔧 Trying with HTTPS clone..."
            fi
            
            # Create timestamped deployment directory
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            DEPLOY_DIR="$HOME/artififi/releases/$TIMESTAMP"
            
            echo "📁 Creating new deployment directory: $DEPLOY_DIR"
            mkdir -p "$DEPLOY_DIR"
            
            echo "📥 Cloning repository to timestamped directory..."
            if git clone ${{ github.server_url }}/${{ github.repository }}.git "$DEPLOY_DIR"; then
              echo "✅ Git clone successful"
            else
              echo "❌ Git clone failed, trying alternative URL..."
              git clone https://github.com/${{ github.repository }}.git "$DEPLOY_DIR" || {
                echo "❌ All clone methods failed"
                exit 1
              }
            fi
            
            cd "$DEPLOY_DIR"
            echo "✅ Repository ready at: $(pwd)"
            echo "📋 Commit info:"
            git log --oneline -1
            
            # Store deployment info for later use
            echo "DEPLOY_DIR=$DEPLOY_DIR" >> ~/.deploy_vars
            echo "TIMESTAMP=$TIMESTAMP" >> ~/.deploy_vars
            
            # Create development environment file in the new release directory
            echo "📝 Creating development environment configuration..."
            echo "# Symfony Core" > .env
            echo "APP_ENV=dev" >> .env
            echo "APP_SECRET=\"${{ secrets.APP_SECRET }}\"" >> .env
            echo "" >> .env
            echo "# Database" >> .env
            echo "DATABASE_URL=\"${{ secrets.DATABASE_URL }}\"" >> .env
            echo "" >> .env
            echo "# Mailer" >> .env
            echo "MAILER_DSN=\"${{ secrets.MAILER_DSN }}\"" >> .env
            echo "" >> .env
            echo "# Messenger" >> .env
            echo "MESSENGER_TRANSPORT_DSN=\"${{ secrets.MESSENGER_TRANSPORT_DSN }}\"" >> .env
            echo "" >> .env
            echo "# WordPress Integration" >> .env
            echo "WORDPRESS_SITE_URL=\"${{ vars.WORDPRESS_SITE_URL }}\"" >> .env
            echo "WORDPRESS_DB_NAME=\"${{ secrets.WORDPRESS_DB_NAME }}\"" >> .env
            echo "WORDPRESS_DB_USER=\"${{ secrets.WORDPRESS_DB_USER }}\"" >> .env
            echo "WORDPRESS_DB_PASSWORD=\"${{ secrets.WORDPRESS_DB_PASSWORD }}\"" >> .env
            echo "WORDPRESS_DB_HOST=\"${{ secrets.WORDPRESS_DB_HOST }}\"" >> .env
            echo "WORDPRESS_AUTH_KEY=\"${{ secrets.WORDPRESS_AUTH_KEY }}\"" >> .env
            echo "WORDPRESS_SECURE_AUTH_KEY=\"${{ secrets.WORDPRESS_SECURE_AUTH_KEY }}\"" >> .env
            echo "WORDPRESS_LOGGED_IN_KEY=\"${{ secrets.WORDPRESS_LOGGED_IN_KEY }}\"" >> .env
            echo "WORDPRESS_NONCE_KEY=\"${{ secrets.WORDPRESS_NONCE_KEY }}\"" >> .env
            echo "WORDPRESS_AUTH_SALT=\"${{ secrets.WORDPRESS_AUTH_SALT }}\"" >> .env
            echo "WORDPRESS_SECURE_AUTH_SALT=\"${{ secrets.WORDPRESS_SECURE_AUTH_SALT }}\"" >> .env
            echo "WORDPRESS_LOGGED_IN_SALT=\"${{ secrets.WORDPRESS_LOGGED_IN_SALT }}\"" >> .env
            echo "WORDPRESS_NONCE_SALT=\"${{ secrets.WORDPRESS_NONCE_SALT }}\"" >> .env
            echo "WORDPRESS_DEBUG=false" >> .env
            echo "WORDPRESS_DEBUG_DISPLAY=false" >> .env
            echo "" >> .env
            echo "# Database Root Password" >> .env
            echo "MYSQL_ROOT_PASSWORD=\"${{ secrets.MYSQL_ROOT_PASSWORD }}\"" >> .env
            echo "" >> .env
            echo "# Production Domain for Traefik" >> .env
            echo "APP_NAME=artififi" >> .env
            echo "PROJECT_DIR=artififi" >> .env
            echo "" >> .env
            echo "# Docker Images (built locally)" >> .env
            echo "PHP_IMAGE=artififi-php:latest" >> .env
            echo "NGINX_IMAGE=artififi-nginx:latest" >> .env
            
            # Set production environment variables
            export WORDPRESS_SITE_URL="${{ vars.WORDPRESS_SITE_URL }}"
            export WORDPRESS_DB_NAME="${{ secrets.WORDPRESS_DB_NAME }}"
            export WORDPRESS_DB_USER="${{ secrets.WORDPRESS_DB_USER }}"
            export WORDPRESS_DB_PASSWORD="${{ secrets.WORDPRESS_DB_PASSWORD }}"
            export WORDPRESS_AUTH_KEY="${{ secrets.WORDPRESS_AUTH_KEY }}"
            export WORDPRESS_SECURE_AUTH_KEY="${{ secrets.WORDPRESS_SECURE_AUTH_KEY }}"
            export WORDPRESS_LOGGED_IN_KEY="${{ secrets.WORDPRESS_LOGGED_IN_KEY }}"
            export WORDPRESS_NONCE_KEY="${{ secrets.WORDPRESS_NONCE_KEY }}"
            export WORDPRESS_AUTH_SALT="${{ secrets.WORDPRESS_AUTH_SALT }}"
            export WORDPRESS_SECURE_AUTH_SALT="${{ secrets.WORDPRESS_SECURE_AUTH_SALT }}"
            export WORDPRESS_LOGGED_IN_SALT="${{ secrets.WORDPRESS_LOGGED_IN_SALT }}"
            export WORDPRESS_NONCE_SALT="${{ secrets.WORDPRESS_NONCE_SALT }}"
            export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"
            
            echo "✅ Environment files created at: $(pwd)/.env and $(pwd)/.env.prod"
            
            # Stop only project-related containers from previous deployments
            echo "🛑 Stopping all project containers..."
            
            # Stop containers by name patterns (artififi, timestamps, traefik on port 443)
            docker ps --filter "name=artififi" --format "{{.ID}}" | xargs -r docker stop 2>/dev/null || echo "No artififi containers to stop"
            docker ps --filter "name=traefik" --format "{{.ID}}" | xargs -r docker stop 2>/dev/null || echo "No traefik containers to stop"
            docker ps --filter "publish=80" --format "{{.ID}}" | xargs -r docker stop 2>/dev/null || echo "No containers on port 80 to stop"
            docker ps --filter "publish=443" --format "{{.ID}}" | xargs -r docker stop 2>/dev/null || echo "No containers on port 443 to stop"
            
            # Remove stopped containers
            docker ps -a --filter "name=artififi" --format "{{.ID}}" | xargs -r docker rm 2>/dev/null || echo "No artififi containers to remove"
            docker ps -a --filter "name=traefik" --format "{{.ID}}" | xargs -r docker rm 2>/dev/null || echo "No traefik containers to remove"
            docker ps -a --filter "publish=80" --format "{{.ID}}" | xargs -r docker rm 2>/dev/null || echo "No port 80 containers to remove"
            docker ps -a --filter "publish=443" --format "{{.ID}}" | xargs -r docker rm 2>/dev/null || echo "No port 443 containers to remove"
            
            # Also remove any containers with timestamp pattern (our release containers)
            docker ps -a --format "{{.Names}} {{.ID}}" | grep -E "^[0-9]{8}_[0-9]{6}_" | awk '{print $2}' | xargs -r docker rm -f 2>/dev/null || echo "No timestamp containers to remove"
            
            # Clean up project-specific Docker networks
            echo "🌐 Cleaning up project Docker networks..."
            docker network ls --filter name=artififi --format "{{.Name}}" | xargs -r docker network rm 2>/dev/null || echo "No artififi networks to remove"
            
            # Clean up networks with timestamp pattern (our release networks)
            docker network ls --format "{{.Name}}" | grep -E "^[0-9]{8}_[0-9]{6}_" | xargs -r docker network rm 2>/dev/null || echo "No timestamp networks to remove"
            
            # Also clean up any orphaned networks
            docker network prune -f 2>/dev/null || echo "No orphaned networks to remove"
            
            # Clean up old project Docker images
            echo "🗂️ Cleaning up old project Docker images..."
            docker images --filter "reference=artififi-*" --format "{{.ID}}" | xargs -r docker rmi 2>/dev/null || echo "No old project images to remove"
            
            # Clean up old releases (keep only last 3)
            echo "🧹 Cleaning up old releases..."
            cd $HOME/artififi/releases
            ls -1t | tail -n +4 | xargs -r rm -rf
            echo "📋 Remaining releases:"
            ls -la
            

            
            # Create base PHP image if it doesn't exist
            echo "🏗️ Preparing base PHP image..."
            if ! ${DOCKER_CMD:-docker} image inspect ghcr.io/phpsword/php:8.1 >/dev/null 2>&1; then
              echo "Base image not found, creating from php:8.1-fpm..."
              ${DOCKER_CMD:-docker} pull php:8.1-fpm
              ${DOCKER_CMD:-docker} tag php:8.1-fpm ghcr.io/phpsword/php:8.1
            fi
            
            # Load deployment variables
            source ~/.deploy_vars
            
            # Build Docker images using docker-compose
            echo "🏗️ Building application images..."
            cd "$DEPLOY_DIR"
            docker-compose -f docker-compose.yml build
            
            # Create production docker-compose override for volumes and production settings
            echo "🔧 Creating production docker-compose override..."
            echo 'version: "3.8"' > docker-compose.override.yml
            echo '' >> docker-compose.override.yml
            echo 'services:' >> docker-compose.override.yml
            echo '    php:' >> docker-compose.override.yml
            echo '        build:' >> docker-compose.override.yml
            echo '            args:' >> docker-compose.override.yml
            echo '                PHP_VERSION: 8.1' >> docker-compose.override.yml
            echo '        restart: unless-stopped' >> docker-compose.override.yml
            echo '        volumes:' >> docker-compose.override.yml
            echo '            - ./:/var/www/html' >> docker-compose.override.yml
            echo '            - app-data:/var/www/html/var' >> docker-compose.override.yml
            echo '            - app-uploads:/var/www/html/public/uploads' >> docker-compose.override.yml
            echo '' >> docker-compose.override.yml
            echo '    nginx:' >> docker-compose.override.yml
            echo '        restart: unless-stopped' >> docker-compose.override.yml
            echo '        volumes:' >> docker-compose.override.yml
            echo '            - ./public:/var/www/html/public:ro' >> docker-compose.override.yml
            echo '            - ./wp:/var/www/html/wp:ro' >> docker-compose.override.yml
            echo '            - app-uploads:/var/www/html/public/uploads:ro' >> docker-compose.override.yml
            echo '        labels:' >> docker-compose.override.yml
            echo "            - traefik.http.routers.\${APP_NAME:-sword}.rule=Host(\`${{ vars.APP_DOMAIN }}\`)" >> docker-compose.override.yml
            echo '' >> docker-compose.override.yml
            echo '    mysql:' >> docker-compose.override.yml
            echo '        restart: unless-stopped' >> docker-compose.override.yml
            echo '        environment:' >> docker-compose.override.yml
            echo '            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}' >> docker-compose.override.yml
            echo '            MYSQL_DATABASE: ${WORDPRESS_DB_NAME:-sword_app}' >> docker-compose.override.yml
            echo '            MYSQL_USER: ${WORDPRESS_DB_USER:-user}' >> docker-compose.override.yml
            echo '            MYSQL_PASSWORD: ${WORDPRESS_DB_PASSWORD:-user}' >> docker-compose.override.yml
            echo '' >> docker-compose.override.yml
            echo '    traefik:' >> docker-compose.override.yml
            echo '        restart: unless-stopped' >> docker-compose.override.yml
            echo '' >> docker-compose.override.yml
            echo 'volumes:' >> docker-compose.override.yml
            echo '    app-data:' >> docker-compose.override.yml
            echo '    app-uploads:' >> docker-compose.override.yml
            
            # Start new containers (previous containers already stopped)
            echo "🚀 Starting new containers..."
            # Set production domain as environment variable for docker-compose
            export APP_NAME="artififi"
            export PROJECT_DIR="artififi"
            # Start only production services (exclude mailer which is dev-only)
            docker-compose -f docker-compose.yml up -d php nginx mysql traefik
            
            # Wait for containers to be ready
            sleep 30
            
            # Run post-deployment commands
            echo "📦 Setting up PHP dependencies..."
            cd "$DEPLOY_DIR"
            
            # Wait for PHP container to be fully ready
            echo "⏳ Waiting for PHP container to be ready..."
            sleep 10
            
            # Check if PHP container is running
            if ! docker-compose -f docker-compose.yml exec -T php php --version >/dev/null 2>&1; then
              echo "❌ PHP container is not ready, waiting longer..."
              sleep 20
              if ! docker-compose -f docker-compose.yml exec -T php php --version >/dev/null 2>&1; then
                echo "❌ PHP container failed to start properly"
                exit 1
              fi
            fi
            echo "✅ PHP container is ready"
            
            # Install Composer if not present
            if ! docker-compose -f docker-compose.yml exec -T php which composer >/dev/null 2>&1; then
              echo "🎵 Installing Composer..."
              # Try to install Composer
              docker-compose -f docker-compose.yml exec -T php sh -c "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer" || {
                echo "⚠️ Composer installation failed, trying alternative method..."
                docker-compose -f docker-compose.yml exec -T php sh -c "wget -O - https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer" || {
                  echo "⚠️ Alternative installation failed, trying direct download..."
                  docker-compose -f docker-compose.yml exec -T php sh -c "wget https://getcomposer.org/composer-stable.phar -O /usr/local/bin/composer && chmod +x /usr/local/bin/composer" || {
                    echo "❌ Could not install Composer, skipping dependency installation"
                  }
                }
              }
            else
              echo "✅ Composer already installed"
            fi
            
            # Install dependencies if composer is available
            if docker-compose -f docker-compose.yml exec -T php which composer >/dev/null 2>&1; then
              echo "📥 Installing PHP dependencies..."
              
              # Check if composer.json exists
              if ! docker-compose -f docker-compose.yml exec -T php test -f composer.json; then
                echo "❌ composer.json not found in container"
                exit 1
              fi
              
              # Clear any existing vendor directory issues
              docker-compose -f docker-compose.yml exec -T php rm -rf vendor/composer/tmp-* 2>/dev/null || true
              
              # Run composer install with better error handling
              echo "📋 Running composer install..."
              if docker-compose -f docker-compose.yml exec -T php composer install --no-dev --optimize-autoloader --no-interaction --verbose; then
                echo "✅ Composer install completed successfully"
              else
                echo "⚠️ Composer install failed, trying with --no-scripts..."
                if docker-compose -f docker-compose.yml exec -T php composer install --no-dev --optimize-autoloader --no-interaction --no-scripts; then
                  echo "✅ Composer install completed without scripts"
                  # Try to run scripts separately
                  echo "🔧 Running composer scripts manually..."
                  docker-compose -f docker-compose.yml exec -T php composer run-script post-install-cmd --no-interaction || echo "⚠️ Post-install scripts failed"
                else
                  echo "❌ Composer install failed completely, but continuing..."
                fi
              fi
            else
              echo "❌ Composer not available, skipping dependency installation"
            fi
            # Run Symfony commands if console is available
            if docker-compose -f docker-compose.yml exec -T php sh -c '[ -f bin/console ]' >/dev/null 2>&1; then
              echo "🎛️ Running Symfony console commands..."
              
              # Check if vendor/autoload.php exists (needed for Symfony commands)
              if ! docker-compose -f docker-compose.yml exec -T php test -f vendor/autoload.php; then
                echo "⚠️ vendor/autoload.php not found, skipping Symfony commands"
              else
                echo "🧩 Clearing Symfony cache..."
                if docker-compose -f docker-compose.yml exec -T php php bin/console cache:clear --env=dev --no-interaction; then
                  echo "✅ Cache cleared successfully"
                else
                  echo "⚠️ Cache clear failed, trying to remove cache manually..."
                  docker-compose -f docker-compose.yml exec -T php rm -rf var/cache/dev/* || true
                fi
                
                echo "🔥 Warming up Symfony cache..."
                docker-compose -f docker-compose.yml exec -T php php bin/console cache:warmup --env=dev --no-interaction || echo "⚠️ Cache warmup failed"
                
                echo "📋 Running database migrations..."
                docker-compose -f docker-compose.yml exec -T php php bin/console doctrine:migrations:migrate --no-interaction || echo "⚠️ Migrations failed or not needed"
              fi
            else
              echo "⚠️ Symfony console not found, skipping console commands"
            fi
            
            # Cleanup old images
            ${DOCKER_CMD:-docker} image prune -f
            
            # Show deployment summary
            echo "✅ Deployment completed successfully!"
            echo "📁 Deployed to: $DEPLOY_DIR"
            echo "🕐 Timestamp: $TIMESTAMP"
            echo "📋 Available releases:"
            ls -la $HOME/artififi/releases/ || echo "No previous releases found"

      # Health check
      - name: Health Check
        run: |
          echo "🏥 Running post-deployment health checks..."
          
          # Wait a bit for services to be fully up
          sleep 60
          
          # Basic connectivity test (adjust URL as needed)
          if [ -n "${{ vars.APP_URL }}" ]; then
            echo "Testing application health at ${{ vars.APP_URL }}"
            curl -f -s -o /dev/null ${{ vars.APP_URL }}/health || curl -f -s -o /dev/null ${{ vars.APP_URL }} || {
              echo "❌ Health check failed!"
              exit 1
            }
            echo "✅ Application is responding correctly"
          else
            echo "⚠️  APP_URL not configured, skipping HTTP health check"
          fi

      # Notification
      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Deployment to ${{ env.DEPLOY_ENV }} completed successfully!"
          echo "🔗 Application URL: ${{ vars.APP_URL }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment to ${{ env.DEPLOY_ENV }} failed!"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Attempted by: ${{ github.actor }}"
          exit 1
