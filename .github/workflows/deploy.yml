name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# No need for registry variables since we build locally

jobs:
  # Job 1: Run tests first (reuse existing CI logic)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache vendor (Composer)
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      # Build only potrzebne serwisy (php + mysql)
      - name: Build Docker images
        run: |
          echo "üèóÔ∏è Building Docker images for testing..."
          docker compose -f docker-compose.yml build php mysql

      - name: Start containers
        run: |
          echo "üöÄ Starting containers for testing..."
          docker compose -f docker-compose.yml up -d php mysql
          sleep 10

      # Setup environment and install dependencies
      - name: Setup environment
        run: |
          echo "‚öôÔ∏è Setting up CI environment..."
          cat > .env.ci << EOF
          APP_ENV=test
          APP_SECRET=test-secret-key-for-ci-12345678901234567890
          DATABASE_URL=mysql://user:user@mysql:3306/sword_app
          MAILER_DSN=null://null
          MESSENGER_TRANSPORT_DSN=doctrine://default
          VAR_DUMPER_SERVER=127.0.0.1:9912
          WORDPRESS_SITE_URL=https://test.localhost
          WORDPRESS_DB_NAME=sword_app
          WORDPRESS_DB_USER=user
          WORDPRESS_DB_PASSWORD=user
          WORDPRESS_DB_HOST=mysql
          WORDPRESS_AUTH_KEY=test-auth-key-for-ci
          WORDPRESS_SECURE_AUTH_KEY=test-secure-auth-key-for-ci
          WORDPRESS_LOGGED_IN_KEY=test-logged-in-key-for-ci
          WORDPRESS_NONCE_KEY=test-nonce-key-for-ci
          WORDPRESS_AUTH_SALT=test-auth-salt-for-ci
          WORDPRESS_SECURE_AUTH_SALT=test-secure-auth-salt-for-ci
          WORDPRESS_LOGGED_IN_SALT=test-logged-in-salt-for-ci
          WORDPRESS_NONCE_SALT=test-nonce-salt-for-ci
          WORDPRESS_DEBUG=false
          WORDPRESS_DEBUG_DISPLAY=false
          EOF
          docker compose -f docker-compose.yml cp .env.ci php:/var/www/html/.env

      - name: Install dependencies
        run: |
          echo "üì¶ Installing PHP dependencies..."
          docker compose -f docker-compose.yml exec -T php composer install --no-interaction --prefer-dist --no-scripts

      - name: Run Composer scripts
        run: |
          echo "üîß Running Composer post-install scripts..."
          docker compose -f docker-compose.yml exec -T php php bin/console cache:clear --env=test || true
          docker compose -f docker-compose.yml exec -T php php bin/console cache:warmup --env=test || true

      - name: Run PHPStan
        run: |
          echo "üîç Running PHPStan static analysis..."
          docker compose -f docker-compose.yml exec -T php vendor/bin/phpstan analyse --memory-limit=512M

      - name: Run PHPUnit
        run: |
          echo "üß™ Running PHPUnit tests..."
          docker compose -f docker-compose.yml exec -T php vendor/bin/phpunit --testdox --verbose

      - name: Stop containers
        if: always()
        run: |
          docker compose -f docker-compose.yml down -v
          rm -f .env.ci
          docker system prune -f

  # Job 2: Deploy to production
  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "üöÄ Preparing deployment to ${{ github.event.inputs.environment || 'production' }}..."
          echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV



      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          debug: true
          script_stop: true
          script: |
            echo "üîç SSH connection test successful!"
            whoami
            pwd
            echo "Server: $(hostname)"
            echo "Date: $(date)"
            
            echo "üöÄ Starting deployment on production server..."
            
            # Check if git is installed
            echo "üîß Checking prerequisites..."
            if ! command -v git >/dev/null 2>&1; then
              echo "‚ùå Git is not installed!"
              exit 1
            fi
            echo "‚úÖ Git version: $(git --version)"
            
            if ! command -v docker >/dev/null 2>&1; then
              echo "‚ùå Docker is not installed!"
              exit 1
            fi
            echo "‚úÖ Docker version: $(docker --version)"
            
            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "‚ùå Docker Compose is not installed!"
              exit 1
            fi
            echo "‚úÖ Docker Compose version: $(docker-compose --version)"
            
            # Create deployment directory and clone/update repository
            echo "üìÅ Managing repository..."
            if [ ! -d "$HOME/artififi" ]; then
              echo "üì• Cloning repository..."
              git clone ${{ github.server_url }}/${{ github.repository }}.git $HOME/artififi || {
                echo "‚ùå Git clone failed!"
                exit 1
              }
              cd $HOME/artififi || {
                echo "‚ùå Cannot cd to artififi directory!"
                exit 1
              }
            else
              echo "üì• Updating repository..."
              cd $HOME/artififi || {
                echo "‚ùå Cannot cd to artififi directory!"
                exit 1
              }
              git fetch origin || {
                echo "‚ùå Git fetch failed!"
                exit 1
              }
              git reset --hard origin/${{ github.ref_name }} || {
                echo "‚ùå Git reset failed!"
                exit 1
              }
            fi
            
            echo "‚úÖ Repository ready at: $(pwd)"
            echo "üìã Repository status:"
            git status --short
            echo "üìã Current branch: $(git branch --show-current)"
            
            # Create production environment file
            echo "üìù Creating production environment configuration..."
            cat > .env.prod << EOF
            # Symfony Core
            APP_ENV=prod
            APP_SECRET=${{ secrets.APP_SECRET }}
            
            # Database
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            
            # Mailer
            MAILER_DSN=${{ secrets.MAILER_DSN }}
            
            # Messenger
            MESSENGER_TRANSPORT_DSN=${{ secrets.MESSENGER_TRANSPORT_DSN }}
            
            # WordPress Integration
            WORDPRESS_SITE_URL=${{ vars.WORDPRESS_SITE_URL }}
            WORDPRESS_DB_NAME=${{ secrets.WORDPRESS_DB_NAME }}
            WORDPRESS_DB_USER=${{ secrets.WORDPRESS_DB_USER }}
            WORDPRESS_DB_PASSWORD=${{ secrets.WORDPRESS_DB_PASSWORD }}
            WORDPRESS_DB_HOST=${{ secrets.WORDPRESS_DB_HOST }}
            WORDPRESS_AUTH_KEY=${{ secrets.WORDPRESS_AUTH_KEY }}
            WORDPRESS_SECURE_AUTH_KEY=${{ secrets.WORDPRESS_SECURE_AUTH_KEY }}
            WORDPRESS_LOGGED_IN_KEY=${{ secrets.WORDPRESS_LOGGED_IN_KEY }}
            WORDPRESS_NONCE_KEY=${{ secrets.WORDPRESS_NONCE_KEY }}
            WORDPRESS_AUTH_SALT=${{ secrets.WORDPRESS_AUTH_SALT }}
            WORDPRESS_SECURE_AUTH_SALT=${{ secrets.WORDPRESS_SECURE_AUTH_SALT }}
            WORDPRESS_LOGGED_IN_SALT=${{ secrets.WORDPRESS_LOGGED_IN_SALT }}
            WORDPRESS_NONCE_SALT=${{ secrets.WORDPRESS_NONCE_SALT }}
            WORDPRESS_DEBUG=false
            WORDPRESS_DEBUG_DISPLAY=false
            
            # Database Root Password
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            
            # Production Domain for Traefik
            PRODUCTION_DOMAIN=${{ vars.APP_DOMAIN }}
            
            # Docker Images (built locally)
            PHP_IMAGE=artififi-php:latest
            NGINX_IMAGE=artififi-nginx:latest
            EOF
            
            # Create base PHP image if it doesn't exist
            echo "üèóÔ∏è Preparing base PHP image..."
            if ! docker image inspect ghcr.io/phpsword/php:8.1 >/dev/null 2>&1; then
              echo "Base image not found, creating from php:8.1-fpm..."
              docker pull php:8.1-fpm
              docker tag php:8.1-fpm ghcr.io/phpsword/php:8.1
            fi
            
            # Build Docker images using docker-compose
            echo "üèóÔ∏è Building application images..."
            docker-compose -f docker-compose.prod.yml build
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down || true
            
            # Start new containers
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
            
            # Wait for containers to be ready
            sleep 30
            
            # Run post-deployment commands
            docker-compose -f docker-compose.prod.yml exec -T php composer install --no-dev --optimize-autoloader
            docker-compose -f docker-compose.prod.yml exec -T php php bin/console cache:clear --env=prod
            docker-compose -f docker-compose.prod.yml exec -T php php bin/console cache:warmup --env=prod
            docker-compose -f docker-compose.prod.yml exec -T php php bin/console doctrine:migrations:migrate --no-interaction || true
            
            # Cleanup old images
            docker image prune -f
            
            echo "‚úÖ Deployment completed successfully!"





      # Health check
      - name: Health Check
        run: |
          echo "üè• Running post-deployment health checks..."
          
          # Wait a bit for services to be fully up
          sleep 60
          
          # Basic connectivity test (adjust URL as needed)
          if [ -n "${{ vars.APP_URL }}" ]; then
            echo "Testing application health at ${{ vars.APP_URL }}"
            curl -f -s -o /dev/null ${{ vars.APP_URL }}/health || curl -f -s -o /dev/null ${{ vars.APP_URL }} || {
              echo "‚ùå Health check failed!"
              exit 1
            }
            echo "‚úÖ Application is responding correctly"
          else
            echo "‚ö†Ô∏è  APP_URL not configured, skipping HTTP health check"
          fi

      # Notification
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Deployment to ${{ env.DEPLOY_ENV }} completed successfully!"
          echo "üîó Application URL: ${{ vars.APP_URL }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to ${{ env.DEPLOY_ENV }} failed!"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üë§ Attempted by: ${{ github.actor }}"
          exit 1
