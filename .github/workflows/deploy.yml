name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

# No need for registry variables since we build locally

jobs:
  # Job 1: Run tests first (reuse existing CI logic)
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache vendor (Composer)
      - name: Cache Composer
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-${{ hashFiles('composer.lock') }}
          restore-keys: composer-

      # Build only potrzebne serwisy (php + mysql)
      - name: Build Docker images
        run: |
          echo "🏗️ Building Docker images for testing..."
          docker compose -f docker-compose.yml build php mysql

      - name: Start containers
        run: |
          echo "🚀 Starting containers for testing..."
          docker compose -f docker-compose.yml up -d php mysql
          sleep 10

      # Setup environment and install dependencies
      - name: Setup environment
        run: |
          echo "⚙️ Setting up CI environment..."
          cat > .env.ci << EOF
          APP_ENV=test
          APP_SECRET=test-secret-key-for-ci-12345678901234567890
          DATABASE_URL=mysql://user:user@mysql:3306/sword_app
          MAILER_DSN=null://null
          MESSENGER_TRANSPORT_DSN=doctrine://default
          VAR_DUMPER_SERVER=127.0.0.1:9912
          WORDPRESS_SITE_URL=https://test.localhost
          WORDPRESS_DB_NAME=sword_app
          WORDPRESS_DB_USER=user
          WORDPRESS_DB_PASSWORD=user
          WORDPRESS_DB_HOST=mysql
          WORDPRESS_AUTH_KEY=test-auth-key-for-ci
          WORDPRESS_SECURE_AUTH_KEY=test-secure-auth-key-for-ci
          WORDPRESS_LOGGED_IN_KEY=test-logged-in-key-for-ci
          WORDPRESS_NONCE_KEY=test-nonce-key-for-ci
          WORDPRESS_AUTH_SALT=test-auth-salt-for-ci
          WORDPRESS_SECURE_AUTH_SALT=test-secure-auth-salt-for-ci
          WORDPRESS_LOGGED_IN_SALT=test-logged-in-salt-for-ci
          WORDPRESS_NONCE_SALT=test-nonce-salt-for-ci
          WORDPRESS_DEBUG=false
          WORDPRESS_DEBUG_DISPLAY=false
          EOF
          docker compose -f docker-compose.yml cp .env.ci php:/var/www/html/.env

      - name: Install dependencies
        run: |
          echo "📦 Installing PHP dependencies..."
          docker compose -f docker-compose.yml exec -T php composer install --no-interaction --prefer-dist --no-scripts

      - name: Run Composer scripts
        run: |
          echo "🔧 Running Composer post-install scripts..."
          docker compose -f docker-compose.yml exec -T php php bin/console cache:clear --env=test || true
          docker compose -f docker-compose.yml exec -T php php bin/console cache:warmup --env=test || true

      - name: Run PHPStan
        run: |
          echo "🔍 Running PHPStan static analysis..."
          docker compose -f docker-compose.yml exec -T php vendor/bin/phpstan analyse --memory-limit=512M

      - name: Run PHPUnit
        run: |
          echo "🧪 Running PHPUnit tests..."
          docker compose -f docker-compose.yml exec -T php vendor/bin/phpunit --testdox --verbose

      - name: Stop containers
        if: always()
        run: |
          docker compose -f docker-compose.yml down -v
          rm -f .env.ci
          docker system prune -f

  # Job 2: Deploy to production
  deploy:
    needs: [test]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ vars.APP_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup deployment environment
        run: |
          echo "🚀 Preparing deployment to ${{ github.event.inputs.environment || 'production' }}..."
          echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV



      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          debug: true
          script_stop: true
          script: |
            echo "🔍 SSH connection test successful!"
            whoami
            pwd
            echo "Server: $(hostname)"
            echo "Date: $(date)"
            
            echo "🚀 Starting deployment on production server..."
            
            # Check if git is installed
            echo "🔧 Checking prerequisites..."
            if ! command -v git >/dev/null 2>&1; then
              echo "❌ Git is not installed!"
              exit 1
            fi
            echo "✅ Git version: $(git --version)"
            
            if ! command -v docker >/dev/null 2>&1; then
              echo "❌ Docker is not installed!"
              exit 1
            fi
            echo "✅ Docker found: $(which docker)"
            
            # Test Docker permissions
            echo "🔐 Testing Docker permissions..."
            if docker version >/dev/null 2>&1; then
              echo "✅ Docker is accessible"
              echo "📋 Docker version: $(docker --version)"
            else
              echo "❌ Docker permission denied. User may not be in docker group."
              echo "👤 Current user: $(whoami)"
              echo "👥 User groups: $(groups)"
              echo "🔧 Attempting to add user to docker group..."
              sudo usermod -aG docker $(whoami) || echo "❌ Failed to add user to docker group"
              echo "🔄 You may need to logout and login again, or restart the session"
              # Try with sudo as temporary fix
              if sudo docker version >/dev/null 2>&1; then
                echo "✅ Docker works with sudo"
                echo "⚠️  Using sudo for Docker commands"
                DOCKER_CMD="sudo docker"
                DOCKER_COMPOSE_CMD="sudo docker-compose"
              else
                echo "❌ Docker doesn't work even with sudo"
                exit 1
              fi
            fi
            
            if ! command -v docker-compose >/dev/null 2>&1; then
              echo "❌ Docker Compose is not installed!"
              exit 1
            fi
            echo "✅ Docker Compose found: $(which docker-compose)"
            
            # Test Docker Compose permissions  
            echo "🔐 Testing Docker Compose permissions..."
            if ${DOCKER_COMPOSE_CMD:-docker-compose} version >/dev/null 2>&1; then
              echo "✅ Docker Compose is accessible"
              echo "📋 Docker Compose version: $(${DOCKER_COMPOSE_CMD:-docker-compose} --version)"
            else
              echo "❌ Docker Compose permission denied"
              exit 1
            fi
            
            # Create deployment directory and clone/update repository
            echo "📁 Managing repository..."
            echo "🔗 Repository URL: ${{ github.server_url }}/${{ github.repository }}.git"
            echo "🌿 Target branch: ${{ github.ref_name }}"
            echo "📂 Target directory: $HOME/artififi"
            
            # Test GitHub connectivity
            echo "🌐 Testing GitHub connectivity..."
            if ping -c 3 github.com >/dev/null 2>&1; then
              echo "✅ GitHub is reachable"
            else
              echo "❌ GitHub is not reachable"
              exit 1
            fi
            
            # Test if repository is accessible
            echo "🔐 Testing repository access..."
            if git ls-remote --heads ${{ github.server_url }}/${{ github.repository }}.git >/dev/null 2>&1; then
              echo "✅ Repository is accessible"
            else
              echo "❌ Repository is not accessible (may be private or authentication failed)"
              echo "🔧 Trying with HTTPS clone..."
            fi
            
            # Create timestamped deployment directory
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            DEPLOY_DIR="$HOME/artififi/releases/$TIMESTAMP"
            
            echo "📁 Creating new deployment directory: $DEPLOY_DIR"
            mkdir -p "$DEPLOY_DIR"
            
            echo "📥 Cloning repository to timestamped directory..."
            if git clone ${{ github.server_url }}/${{ github.repository }}.git "$DEPLOY_DIR"; then
              echo "✅ Git clone successful"
            else
              echo "❌ Git clone failed, trying alternative URL..."
              git clone https://github.com/${{ github.repository }}.git "$DEPLOY_DIR" || {
                echo "❌ All clone methods failed"
                exit 1
              }
            fi
            
            cd "$DEPLOY_DIR"
            echo "✅ Repository ready at: $(pwd)"
            echo "📋 Commit info:"
            git log --oneline -1
            
            # Store deployment info for later use
            echo "DEPLOY_DIR=$DEPLOY_DIR" >> ~/.deploy_vars
            echo "TIMESTAMP=$TIMESTAMP" >> ~/.deploy_vars
            
            # Create production environment file in the new release directory
            echo "📝 Creating production environment configuration..."
            cat > .env.prod << EOF
            # Symfony Core
            APP_ENV=prod
            APP_SECRET=${{ secrets.APP_SECRET }}
            
            # Database
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            
            # Mailer
            MAILER_DSN=${{ secrets.MAILER_DSN }}
            
            # Messenger
            MESSENGER_TRANSPORT_DSN=${{ secrets.MESSENGER_TRANSPORT_DSN }}
            
            # WordPress Integration
            WORDPRESS_SITE_URL=${{ vars.WORDPRESS_SITE_URL }}
            WORDPRESS_DB_NAME=${{ secrets.WORDPRESS_DB_NAME }}
            WORDPRESS_DB_USER=${{ secrets.WORDPRESS_DB_USER }}
            WORDPRESS_DB_PASSWORD=${{ secrets.WORDPRESS_DB_PASSWORD }}
            WORDPRESS_DB_HOST=${{ secrets.WORDPRESS_DB_HOST }}
            WORDPRESS_AUTH_KEY=${{ secrets.WORDPRESS_AUTH_KEY }}
            WORDPRESS_SECURE_AUTH_KEY=${{ secrets.WORDPRESS_SECURE_AUTH_KEY }}
            WORDPRESS_LOGGED_IN_KEY=${{ secrets.WORDPRESS_LOGGED_IN_KEY }}
            WORDPRESS_NONCE_KEY=${{ secrets.WORDPRESS_NONCE_KEY }}
            WORDPRESS_AUTH_SALT=${{ secrets.WORDPRESS_AUTH_SALT }}
            WORDPRESS_SECURE_AUTH_SALT=${{ secrets.WORDPRESS_SECURE_AUTH_SALT }}
            WORDPRESS_LOGGED_IN_SALT=${{ secrets.WORDPRESS_LOGGED_IN_SALT }}
            WORDPRESS_NONCE_SALT=${{ secrets.WORDPRESS_NONCE_SALT }}
            WORDPRESS_DEBUG=false
            WORDPRESS_DEBUG_DISPLAY=false
            
            # Database Root Password
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            
            # Production Domain for Traefik
            PRODUCTION_DOMAIN=${{ vars.APP_DOMAIN }}
            
            # Docker Images (built locally)
            PHP_IMAGE=artififi-php:latest
            NGINX_IMAGE=artififi-nginx:latest
            EOF
            
            echo "✅ Environment file created at: $(pwd)/.env.prod"
            
            # Stop only project-related containers from previous deployments
            echo "🛑 Stopping artififi project containers..."
            docker ps --filter "name=artififi" --format "{{.ID}}" | xargs -r docker stop 2>/dev/null || echo "No project containers to stop"
            docker ps -a --filter "name=artififi" --format "{{.ID}}" | xargs -r docker rm 2>/dev/null || echo "No project containers to remove"
            
            # Clean up project-specific Docker networks
            echo "🌐 Cleaning up project Docker networks..."
            docker network ls --filter name=artififi --format "{{.Name}}" | xargs -r docker network rm 2>/dev/null || echo "No project networks to remove"
            # Also clean up any orphaned networks
            docker network prune -f 2>/dev/null || echo "No orphaned networks to remove"
            
            # Clean up old project Docker images
            echo "🗂️ Cleaning up old project Docker images..."
            docker images --filter "reference=artififi-*" --format "{{.ID}}" | xargs -r docker rmi 2>/dev/null || echo "No old project images to remove"
            
            # Clean up old releases (keep only last 3)
            echo "🧹 Cleaning up old releases..."
            cd $HOME/artififi/releases
            ls -1t | tail -n +4 | xargs -r rm -rf
            echo "📋 Remaining releases:"
            ls -la
            

            
            # Create base PHP image if it doesn't exist
            echo "🏗️ Preparing base PHP image..."
            if ! ${DOCKER_CMD:-docker} image inspect ghcr.io/phpsword/php:8.1 >/dev/null 2>&1; then
              echo "Base image not found, creating from php:8.1-fpm..."
              ${DOCKER_CMD:-docker} pull php:8.1-fpm
              ${DOCKER_CMD:-docker} tag php:8.1-fpm ghcr.io/phpsword/php:8.1
            fi
            
            # Load deployment variables
            source ~/.deploy_vars
            
            # Build Docker images using docker-compose
            echo "🏗️ Building application images..."
            cd "$DEPLOY_DIR"
            ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml build
            
            # Start new containers (previous containers already stopped)
            echo "🚀 Starting new containers..."
            ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml --env-file .env.prod up -d
            
            # Wait for containers to be ready
            sleep 30
            
            # Run post-deployment commands
            echo "📦 Checking if vendor directory exists..."
            cd "$DEPLOY_DIR"
            if ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml exec -T php test -d vendor; then
              echo "✅ Vendor directory exists, skipping composer install"
            else
              echo "📥 Vendor directory missing, trying to install dependencies..."
              # Try composer install, but don't fail if composer is not available
              ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml exec -T php composer install --no-dev --optimize-autoloader || {
                echo "⚠️  Composer install failed, but continuing deployment..."
                echo "💡 Make sure your Docker image includes vendor/ directory or has Composer installed"
              }
            fi
            ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml exec -T php php bin/console cache:clear --env=prod
            ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml exec -T php php bin/console cache:warmup --env=prod
            ${DOCKER_COMPOSE_CMD:-docker-compose} -f docker-compose.prod.yml exec -T php php bin/console doctrine:migrations:migrate --no-interaction || true
            
            # Cleanup old images
            ${DOCKER_CMD:-docker} image prune -f
            
            # Show deployment summary
            echo "✅ Deployment completed successfully!"
            echo "📁 Deployed to: $DEPLOY_DIR"
            echo "🕐 Timestamp: $TIMESTAMP"
            echo "📋 Available releases:"
            ls -la $HOME/artififi/releases/ || echo "No previous releases found"





      # Health check
      - name: Health Check
        run: |
          echo "🏥 Running post-deployment health checks..."
          
          # Wait a bit for services to be fully up
          sleep 60
          
          # Basic connectivity test (adjust URL as needed)
          if [ -n "${{ vars.APP_URL }}" ]; then
            echo "Testing application health at ${{ vars.APP_URL }}"
            curl -f -s -o /dev/null ${{ vars.APP_URL }}/health || curl -f -s -o /dev/null ${{ vars.APP_URL }} || {
              echo "❌ Health check failed!"
              exit 1
            }
            echo "✅ Application is responding correctly"
          else
            echo "⚠️  APP_URL not configured, skipping HTTP health check"
          fi

      # Notification
      - name: Notify deployment success
        if: success()
        run: |
          echo "🎉 Deployment to ${{ env.DEPLOY_ENV }} completed successfully!"
          echo "🔗 Application URL: ${{ vars.APP_URL }}"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment to ${{ env.DEPLOY_ENV }} failed!"
          echo "📝 Commit: ${{ github.sha }}"
          echo "👤 Attempted by: ${{ github.actor }}"
          exit 1
